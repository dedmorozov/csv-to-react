{"version":3,"sources":["App.jsx","index.jsx"],"names":["App","useState","columns","setColumns","data","setData","type","accept","onChange","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","XLSX","wsname","SheetNames","ws","Sheets","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","map","c","name","selector","processData","sheet_to_csv","header","readAsBinaryString","pagination","highlightOnHover","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAIO,SAASA,IAAO,IAAD,EACUC,mBAAS,IADnB,mBACbC,EADa,KACJC,EADI,OAEIF,mBAAS,IAFb,mBAEbG,EAFa,KAEPC,EAFO,KA6EpB,OACE,gCACE,uBACEC,KAAK,OACLC,OAAO,kBACPC,SA1BmB,SAACC,GACxB,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,SAACC,GAEf,IAAMC,EAAOD,EAAIL,OAAOO,OAClBC,EAAKC,OAAUH,EAAM,CAAEX,KAAM,WAE7Be,EAASF,EAAGG,WAAW,GACvBC,EAAKJ,EAAGK,OAAOH,IA7DL,SAACI,GAOnB,IANA,IAAMC,EAAkBD,EAAWE,MAAM,WACnCC,EAAUF,EAAgB,GAC7BC,MAAM,uCAEHE,EAAO,GAEJC,EAAI,EAAGA,EAAIJ,EAAgBK,OAAQD,GAAK,EAAG,CAClD,IAAME,EAAMN,EAAgBI,GACzBH,MAAM,uCAET,GAAIC,GAAWI,EAAID,SAAWH,EAAQG,OAAQ,CAG5C,IAFA,IAAME,EAAM,GAEHC,EAAI,EAAGA,EAAIN,EAAQG,OAAQG,GAAK,EAAG,CAC1C,IAAIC,EAAIH,EAAIE,GAERC,EAAEJ,OAAS,IACA,MAATI,EAAE,KACJA,EAAIA,EAAEC,UAAU,EAAGD,EAAEJ,OAAS,IAGR,MAApBI,EAAEA,EAAEJ,OAAS,KACfI,EAAIA,EAAEC,UAAUD,EAAEJ,OAAS,EAAG,KAI9BH,EAAQM,KACVD,EAAIL,EAAQM,IAAMC,GAKlBE,OAAOC,OAAOL,GAAKM,QAAO,SAAAC,GAAC,OAAIA,KAAGT,OAAS,GAC7CF,EAAKY,KAAKR,IAOhB,IAAM/B,EAAU0B,EAAQc,KAAI,SAAAC,GAAC,MAAK,CAChCC,KAAMD,EACNE,SAAUF,MAGZtC,EAAQwB,GACR1B,EAAWD,GAmBT4C,CAFa1B,QAAW2B,aAAaxB,EAAI,CAAEyB,OAAQ,MAKrDnC,EAAOoC,mBAAmBvC,MAWxB,cAAC,IAAD,CACEwC,YAAU,EACVC,kBAAgB,EAChBjD,QAASA,EACTE,KAAMA,OCxFdgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACtD,EAAD,MAEFuD,SAASC,eAAe,W","file":"static/js/main.f9435901.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport DataTable from 'react-data-table-component';\n\nexport function App() {\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n\n  // process CSV data\n  const processData = (dataString) => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0]\n      .split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n    const list = [];\n\n    for (let i = 1; i < dataStringLines.length; i += 1) {\n      const row = dataStringLines[i]\n        .split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      if (headers && row.length === headers.length) {\n        const obj = {};\n\n        for (let j = 0; j < headers.length; j += 1) {\n          let d = row[j];\n\n          if (d.length > 0) {\n            if (d[0] === '\"') {\n              d = d.substring(1, d.length - 1);\n            }\n\n            if (d[d.length - 1] === '\"') {\n              d = d.substring(d.length - 2, 1);\n            }\n          }\n\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n\n        // remove the blank rows\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n\n    // prepare columns list from headers\n    // eslint-disable-next-line no-shadow\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c,\n    }));\n\n    setData(list);\n    setColumns(columns);\n  };\n\n  // handle file upload\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: 'binary' });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      // eslint-disable-next-line no-shadow\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n\n      processData(data);\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        accept=\".csv,.xlsx,.xls\"\n        onChange={handleFileUpload}\n      />\n\n      <DataTable\n        pagination\n        highlightOnHover\n        columns={columns}\n        data={data}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}